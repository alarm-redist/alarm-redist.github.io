---
title: "`r paste0(params$state, ' Congressional Districts')`"
subtitle: "[&laquo; Back](/fifty-states/)"
authors:
    - "50-State Simulation Project Team"
date: today
published-title: "Last updated"
params:
    slug: AR_cd_2020
    state: Arkansas
    cover: false
doi: "10.7910/DVN/SLCD3E"
citation: false
repository_url: https://github.com/alarm-redist/fifty-states/
---

```{r}
#| label: setup
#| include: false
#| echo: false
#| message: false
#| output: false
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev = "svglite")
library(here)
source(here("fifty-states/fifty-states.R"))
```

```{r}
#| label: data
#| include: false
#| echo: false
#| message: false
#| output: false
a <- download_dataverse(params$slug)

n_ref <- redist:::get_n_ref(a$plans)
m <- as.matrix(a$plans)
N <- ncol(m) - n_ref
n_dists <- attr(a$map, "ndists")

abbr <- str_sub(params$slug, 1, 2)

# aspect ratio for plots
bbox <- sf::st_bbox(a$map)
asp_st <- min(diff(bbox[c(2, 4)]) / diff(bbox[c(1, 3)]), 0.85)
knitr::opts_chunk$set(fig.asp = asp_st)
```

<p style="grid-column: kicker; position: sticky; top: 1em; display: block;">
<a href="/fifty-states/" style="font-weight: bold;">Â« Back</a>
</p>

`r params$state` has `r n_dists` congressional districts.
We've generated `r comma(N)` sets of randomly simulated districts according to [the relevant criteria](#redistricting-requirements).
Three of these plans are shown here, along with the actual enacted map.

```{r}
#| label: enacted-samples
#| message: false
#| fig-width: 9

set.seed(5118)
idxs <- sample(N, 3, replace = FALSE)
while (all(m[, idxs[1]] == m[, idxs[2]])) {
  idxs[2] <- sample(N, 1)
}
while (all(m[, idxs[1]] == m[, idxs[3]]) || all(m[, idxs[2]] == m[, idxs[3]])) {
  idxs[3] <- sample(N, 1)
}

a$map$geometry <- sf::st_make_valid(a$map$geometry)
a$map$geometry <- sf::st_buffer(a$map$geometry, 0)

p1 <- plot_cds(a$map, a$map$cd_2020, county, abbr, "dem", coverage = params$cover) +
  labs(title = ~ underline(Enacted ~ plan)) +
  theme(plot.background = element_rect(fill = "#f0f0f0", color = "white"))
p2 <- plot_cds(a$map, m[, idxs[1]], county, abbr, "dem", coverage = params$cover) +
  labs(title = "Sample plan 1") +
  theme(plot.margin = unit(c(0, 0, 0, 0.1), "cm"))
p3 <- plot_cds(a$map, m[, idxs[2]], county, abbr, "dem", coverage = params$cover) +
  labs(title = "Sample plan 2")
p4 <- plot_cds(a$map, m[, idxs[3]], county, abbr, "dem", coverage = params$cover) +
  labs(title = "Sample plan 3")
p1 + p2 + p3 + p4 + plot_layout(guides = "collect")
```


## Partisan Features

```{r}
prop_votes <- sum(a$map$ndv) / sum(a$map$ndv + a$map$nrv)
prop_seats <- n_dists * prop_votes
e_dem_samp <- subset_sampled(a$plans)$e_dem
```

In `r params$state`, Democrats win about `r percent(prop_votes)` of the vote in a typical statewide election.
Proportionally, that would translate to `r number(prop_seats, 0.1)` Democratic seats out of `r n_dists` total.

```{r}
#| label: seats
#| fig-asp: 0.55
redist.plot.hist(a$plans, e_dem,
  breaks = seq(0, n_dists, 1 / 7),
  fill = "#777777", color = "#777777"
) +
  geom_vline(xintercept = prop_seats, color = "#00000055", size = 0.8) +
  labs(x = "Average number of Democratic seats") +
  annotate("text",
    x = n_dists, y = 0, label = str_glue("{n_dists} total districts"),
    angle = 90, hjust = -0.1, size = 3
  ) +
  annotate("text",
    x = a$plans$e_dem[1], y = Inf, label = "Enacted plan",
    angle = 90, hjust = 1.1, vjust = -0.5, size = 3.5
  ) +
  annotate("text",
    x = prop_seats, y = Inf, label = str_glue("Proportional share"),
    angle = 90, hjust = 2.2, vjust = -0.5, size = 3
  ) +
  guides(color = "none")
```

<aside>
[Learn more about this graph](../about/#plots-exp-seats)
</aside>

But proportionality isn't guaranteed, even in a fair redistricting process.
In our simulated plans, Democrats won anywhere from `r number(quantile(e_dem_samp, 0.01), 0.1)` to `r number(quantile(e_dem_samp, 0.99), 0.1)` seats on average, with `r number(median(e_dem_samp), 0.1)` being the most typical.
In contrast, **we expect the enacted plan to yield `r number(a$plans$e_dem[1], 0.1)` Democratic seats on average, which is `r qile_english(a$plans$e_dem[1], e_dem_samp)` simulated plans.**

The graph below breaks this down in detail, showing how each district of the enacted plan compares to the set of simulated districts.

```{r}
#| label: distr-dem
#| fig-asp: 0.75

color_scale <- function(...) {
  scale_color_manual(...,
    values = c("black", GOP_DEM[2], GOP_DEM[14]),
    labels = c("pt", "Rep.", "Dem."), guide = "none"
  )
}
if (all(a$plans$e_dvs > 0.5)) {
  color_scale <- function(...) {
    scale_color_manual(...,
      values = c("black", GOP_DEM[14]), labels = c("pt", "Dem."),
      guide = "none"
    )
  }
}

set.seed(5118)
redist.plot.distr_qtys(a$plans, e_dvs,
  color_thresh = 0.5,
  size = 0.04 - sqrt(8) / 250, alpha = 0.4
) +
  geom_hline(yintercept = 0.5, color = "#00000055", size = 0.5) +
  scale_y_continuous("Two-party vote margin", labels = lbl_party) +
  labs(x = "Simulated districts, ordered by Democratic vote margin") +
  annotate("text",
    x = 1.5, y = min(a$plans$e_dvs[1:n_dists]),
    label = "Enacted plan", hjust = -0.05, size = 3.5
  ) +
  color_scale() +
  guides(lty = "none")
```

<aside>
[Learn more about this graph](../about/#plots-districts)
</aside>

## Gerrymandering metrics

```{r}
if (prop_votes > 0.65) {
  warning <- str_glue("These metrics may be misleading for a strongly Democratic state like {params$state}.")
} else if (prop_votes < 0.35) {
  warning <- str_glue("These metrics may be misleading for a strongly Republican state like {params$state}.")
} else {
  warning <- ""
}
```

There are other ways of measuring the partisan skew of redistricting plan.
The graph below shows two these metrics.
The deviation from partisan symmetry measures the expected difference in each party's share of seats if they each won 50% of the statewide vote.
The efficiency gap is calculated as the difference in the number of wasted votes for each party.
`r warning `
[Learn more about these metrics here](../about/#plots-pbias-egap).

```{r}
#| label: pbias-egap
#| fig-asp: 0.6
pbias_lim <- c(min(-0.1, a$plans$pbias), max(0.1, a$plans$pbias)) * 1.05
egap_lim <- c(min(-0.1, a$plans$egap), max(0.1, a$plans$egap)) * 1.05

p_pbias <- redist.plot.hist(a$plans, pbias,
  bins = 24,
  fill = "#777777", color = "#777777"
) +
  geom_vline(xintercept = 0.0, color = "#00000055", size = 0.8) +
  scale_x_continuous("Deviation from partisan symmetry",
    labels = lbl_party_zero, limits = pbias_lim
  ) +
  annotate("text",
    x = a$plans$pbias[1], y = Inf, label = "Enacted plan",
    angle = 90, hjust = 1.1, vjust = -0.5, size = 3.5
  ) +
  guides(color = "none")
p_egap <- redist.plot.hist(a$plans, egap,
  bins = 32,
  fill = "#777777", color = "#777777"
) +
  geom_vline(xintercept = 0.0, color = "#00000055", size = 0.8) +
  scale_x_continuous("Efficiency gap", labels = lbl_party_zero, limits = egap_lim) +
  annotate("text",
    x = a$plans$egap[1], y = Inf, label = "Enacted plan",
    angle = 90, hjust = 1.1, vjust = -0.5
  ) +
  guides(color = "none")
suppressWarnings(print(p_pbias + p_egap))
```

<aside>
[Learn more about this graph](../about/#plots-pbias-egap)
</aside>

## Traditional redistricting criteria

```{r}
d_comp <- group_by(a$plans, draw) %>%
  summarize(comp = mean(comp_polsby))
comp_sims <- subset_sampled(d_comp)$comp
spl_sims <- subset_sampled(a$plans)$county_splits
```

Factors other than partisanship are important for redistricting, too.
The graph below shows the geographic compactness and the number of counties which are split into multiple districts.
As far as compactness, `r params$state`'s enacted plan scores a `r number(d_comp$comp[1], 0.01)`, `r qile_english(d_comp$comp[1], comp_sims)` simulated plans (a higher score means more compact).
It splits `r cli::pluralize("{a$plans$county_splits[1]} count{?y/ies}")`, compared to an average of `r cli::pluralize("{median(spl_sims)} count{?y/ies}")` for our simulated plans.

```{r}
#| label: trad-criteria
#| fig-asp: 0.6
p_comp <- d_comp %>%
  redist.plot.hist(comp, bins = 64, fill = "#777777", color = "#777777") +
  labs(x = "Average Polsby Popper") +
  annotate("text",
    x = mean(a$plans$comp_polsby[1:n_dists]), y = Inf,
    label = "Enacted plan", angle = 90, hjust = 1.1, vjust = -0.5, size = 3.5
  ) +
  guides(color = "none")
p_spl <- redist.plot.hist(a$plans, county_splits,
  fill = "#777777", color = "#777777"
) +
  labs(x = "Counties split") +
  annotate("text",
    x = a$plans$county_splits[1], y = Inf, label = "Enacted plan",
    angle = 90, hjust = 1.1, vjust = -0.5, size = 3.5
  ) +
  guides(color = "none")
p_comp + p_spl
```

<aside>
[Learn more about this graph](../about/#plots-trad)
</aside>

## Political Geography

These two maps show the partisan lean across `r params$state` in a typical statewide election, and the share of minority voters around the state.

```{r}
#| label: geography
#| fig-width: 12
#| fig-asp: !expr 0.6 * asp_st

geom_state <- summarize(a$map, is_coverage = params$cover)
suppressMessages({
  p_party <- plot(as_redist_map(a$map), ndv / (ndv + nrv)) +
    geom_sf(data = geom_state, fill = NA, color = "black", size = 0.5) +
    scale_fill_party_c("Two-party vote margin", limits = c(0.1, 0.9)) +
    theme(legend.key.width = unit(1, "cm"))
  p_race <- plot(as_redist_map(a$map), vap_white / vap) +
    geom_sf(data = geom_state, fill = NA, color = "black", size = 0.5) +
    scale_fill_steps("Pct. white",
      high = "#24324c", low = "#ffffff",
      limits = c(0.2, 1), breaks = c(0.2, 0.35, 0.5, 0.65, 0.8, 1),
      oob = squish, labels = \(x) percent(x, 1)
    ) +
    theme(legend.key.width = unit(1, "cm"))
})
p_party + p_race
```

## More information
[Download the data for `r params$state`](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/SLCD3E).

[Learn more about our methodology](/fifty-states/about/).

Elections included in analysis:

`r paste0(' - ', list_elections(a$map), '\n', collapse = '')`

### Redistricting requirements

Our algorithmic constraints used in simulations are in part are based on some of these requirements and discretionary criteria. See full documentation and code for the complete implementation details.

```{r}
#| label: reqs
#| results: asis
docstr <- as.character(a$doc)
idx1 <- str_locate(docstr, "requirements</h2>")[1, 2]
idx2 <- str_locate(docstr, "<h3 id=\"interpretation")[1, 1]
if (is.na(idx2)) idx2 <- str_locate(docstr, "<h3 id=\"algorithmic")[1, 1]
str_sub(docstr, idx1 + 2L, idx2 - 1L) %>% cat()
```




<style>
d-article {
    overflow: visible !important;
}
</style>
