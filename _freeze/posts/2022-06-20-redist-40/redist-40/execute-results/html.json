{
  "hash": "84bd4db46df5876fe108b1561070ede8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"redist 4.0\"\ndescription: |\n  A major release with big changes to constraints and diagnostics.\nauthor:\n  - name: Christopher T. Kenny\n    affiliation: Department of Government, Harvard University \n    url: https://www.christophertkenny.com/\n  - name: Cory McCartan\n    affiliation: Department of Statistics, Harvard University\n    url: https://www.corymccartan.com\ndate: 2022-06-20\noutput:\n  distill::distill_article:\n    self_contained: false\n---\n\n\n\n\n\n\nWe are excited to announce the arrival of `redist` 4.0.1 on [CRAN](https://cran.r-project.org/package=redist). This update focuses on increasing constraint consistency and diagnostic usability. The new tools here have been thoroughly tested as part of the [50-State Redistricting Simulations](https://alarm-redist.github.io/fifty-states/) project.\n\nTo install the new version, run `install.packages('redist')`.\n\n# New Features\n\n* A new constraint interface that is more flexible, user friendly, and consistent \nacross algorithms (see `redist_constr()` and `?constraints`). For the first time,\nuser-defined custom constraints are supported and integrated within all three \nalgorithms.\n* New diagnostic-checking function, `summary.redist_plans()`\n* Summary statistics have been broken out into a new `redistmetrics` package\nThis will speed up compilation time and also provides a cleaner, more extensible \ninterface for the implementation of additional metrics.\n* Parallel computing support for the SMC algorithm, both within and across sampling runs\n* Reproducible across-run parallelism throughout the package, via `doRNG`\n* Much faster `match_numbers()` using the Hungarian method\n* `min_move_parity()` calculates how much population needs to be moved between \ndistricts in order to completely balance a redistricting plan.\n* Support for partial SMC simulations, where fewer districts are drawn than the \ntotal number. Allows advanced users to manually combine partial runs to \nform complete maps.\n* Improved algorithm reporting, including new progress bars and `cli` errors and \nwarnings throughout the package\n* Update the SMC algorithm to include a missing correction factor for the number\nof ways to sequentially label districts. This factor should not have an effect\non substantive conclusions and summary statistics.\n* Remove deprecated functions\n* Many bug fixes (see https://github.com/alarm-redist/redist/issues)\n\n\n# Updated Features: A Brief Demo\n\nThe first thing you'll notice upon loading `redist` is that it also loads `redistmetrics`. `redistmetrics` used to live within `redist` but has been separated to keep the package size reasonable and to make the individual compile times shorter.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(redist)\n```\n:::\n\n\n\n\nWe can pull in [some data from the ALARM Project](https://alarm-redist.github.io/posts/2021-08-10-census-2020/), which combines 2020 Census data with [VEST](https://dataverse.harvard.edu/dataverse/electionscience)'s election data, retabulated to 2020 voting districts. For this example, we can use data from New Mexico.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnm <- geomander::get_alarm('NM')\n```\n:::\n\n\n\n<!--- https://redistricting.lls.edu/wp-content/uploads/nm_2020_congress_2021-12-17_2031-06-30.json--->\nWe can then make a `redist_map` for New Mexico.^[For a very brief intro to `redist_map`s, see the 3.0 release post at <https://alarm-redist.github.io/posts/2021-04-02-redist-300/>.]\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_nm <- redist_map(nm, ndists = 3, pop_tol = 0.005)\n```\n:::\n\n\n\n\nAnd we can begin with a basic run of `redist_smc` to sample 1000 plans using the sampler from [Sequential Monte Carlo for Sampling Balanced and Compact Redistricting Plans](https://arxiv.org/abs/2008.06131) by [Cory McCartan](https://corymccartan.com/) and [Kosuke Imai](https://imai.fas.harvard.edu/). Most importantly, `redist_smc` now offers an argument for the number of independent sampling runs. For now, we can break that 1000 plans into 2 runs of 500.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2022)\nplans <- redist_smc(map = map_nm, nsims = 500, runs = 2, counties = county)\n```\n:::\n\n\n\n\nThe new messages above are created with `cli` to more make message printing cleaner and more consistent. \n\nTo the output, we can add some basic summary information using available `redistmetrics` functions, automatically loaded by `redist`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplans <- plans %>% \n    mutate(\n        frac_kept = comp_frac_kept(plans = ., shp = map_nm),\n        dvs_gov_18 = part_dvs(plans = ., shp = map_nm, dvote = gov_18_dem_luj, rvote = gov_18_rep_pea),\n        county_spl = splits_admin(plans = ., shp = map_nm, admin = county)\n    )\n```\n:::\n\n\n\n\nIn order, this adds the Fraction Kept compactness score, the Democratic two-party vote share in the 2018 Governor's race, and the number of counties split.\n\nNow, the `plans` object has a few new columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(plans)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nA <redist_plans> containing 1,000 sampled plans\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPlans have 3 districts from a 1,977-unit map, and were drawn using Sequential\nMonte Carlo.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWith plans resampled from weights\nPlans matrix: int [1:1977, 1:1000] 3 3 3 3 3 3 3 3 3 3 ...\n# A tibble: 6 × 7\n  draw  chain district total_pop frac_kept dvs_gov_18 county_spl\n  <fct> <int>    <int>     <dbl>     <dbl>      <dbl>      <int>\n1 1         1        1    709205     0.990      0.469          2\n2 1         1        2    704388     0.990      0.608          2\n3 1         1        3    703929     0.990      0.617          2\n4 2         1        1    707098     0.984      0.572          3\n5 2         1        2    706478     0.984      0.541          3\n6 2         1        3    703946     0.984      0.599          3\n```\n\n\n:::\n:::\n\n\n\n\nDraw, chain, and district identify each plan, where `chain` is new to 4.0 for SMC. It signifies the SMC run, similar to how `redist_mergesplit_parallel` indicates the chain from merge-split. Despite this, we can use the normal plotting functions on the `redist_plans` object. If we load `patchwork` here to get a nice row of `ggplot`s, we see the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nhist(plans, frac_kept) + \n    plot(plans, dvs_gov_18) + \n    hist(plans, county_spl)\n```\n\n::: {.cell-output-display}\n![](redist-40_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nThese plots are fairly standard. The exciting thing is that we can now call `summary()` to get diagnostic information about the runs of SMC. We can call this on any `redist_plans` object and it will adjust the output information depending on what algorithm generated the plans. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(plans)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSMC: 1,000 sampled plans of 3 districts on 1,977 units\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`adapt_k_thresh`=0.99 • `seq_alpha`=0.5\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`pop_temper`=0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPlan diversity 80% range: 0.18 to 0.68\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✖ WARNING: Low plan diversity\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSampling diagnostics for SMC run 1 of 2 (500 samples)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSampling diagnostics for SMC run 2 of 2 (500 samples)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Watch out for low effective samples, very low acceptance rates (less than\n1%), large std. devs. of the log weights (more than 3 or so), and low numbers\nof unique plans. R-hat values for summary statistics should be between 1 and\n1.05.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Low diversity: Check for potential bottlenecks. Increase the number of\nsamples. Examine the diversity plot with `hist(plans_diversity(plans),\nbreaks=24)`. Consider weakening or removing constraints, or increasing the\npopulation tolerance. If the acceptance rate drops quickly in the final splits,\ntry increasing `pop_temper` by 0.01.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\nR-hat values for summary statistics:\n frac_kept dvs_gov_18 county_spl \n     0.999      1.018      0.999 \n\n         Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k \nSplit 1       484 (96.9%)     12.2%        0.38   320 (101%)      8 \nSplit 2       469 (93.9%)      8.3%        0.50   308 ( 97%)      5 \nResample      382 (76.4%)       NA%        0.50   403 (128%)     NA \n\n         Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k \nSplit 1       485 (97.0%)      7.9%        0.37   306 ( 97%)     12 \nSplit 2       471 (94.2%)      5.4%        0.49   314 ( 99%)      7 \nResample      396 (79.1%)       NA%        0.49   401 (127%)     NA \n```\n\n\n:::\n:::\n\n\n\n\nEach R-hat value is below 1.05, so we do not get any warnings. At a high level, this means that both runs of SMC are sampling from regions comparable by these three summary statistics. That isn't always the case though. If you do get a warning, you should increase the number of simulations or decrease the constraint strengths.\n\nWe next introduce the new constraint interface. To initialize a constraint, we call `redist_constr`, which takes a `redist_map` input.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstr <- redist_constr(map = map_nm)\n```\n:::\n\n\n\n\nWe can add any of the many constraints available with `?constraints`. There are many new constraints to people who have only used `redist_smc/redist_mergesplit` or `redist_flip` before. Now all constraints are available to all algorithms. Additionally, we can write pretty much any constraint that we can map to the positive reals, using the new custom constraint.\n\nFor our custom constraint, we just care that the 100th row of `map_nm` won't be assigned to district 3. We can do the following\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstr <- constr %>% \n    add_constr_custom(\n        strength = 10,\n        fn = function(plan, distr) {\n            as.numeric(plan[100] != 3)\n        }\n    )\n```\n:::\n\n\n\n\nThis takes an R function `fn` and a strength value (how much to multiply the output of `fn` by). The `fn` input should always take the form `function(plan, distr) { ... }`, where `plan` will be an integer matrix of precinct-district assignments and `distr` will be the current district.\n\nWe can then pass `constr` to the `constraints` argument in `redist_smc()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2022)\nplans <- redist_smc(map = map_nm, nsims = 500, runs = 2, counties = county, \n                    constraints = constr)\n```\n:::\n\n\n\n\nAgain, we add some summary statistics.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplans <- plans %>% \n    mutate(\n        frac_kept = comp_frac_kept(plans = ., shp = map_nm),\n        dvs_gov_18 = part_dvs(plans = ., shp = map_nm, dvote = gov_18_dem_luj, rvote = gov_18_rep_pea),\n        county_spl = splits_admin(plans = ., shp = map_nm, admin = county)\n    )\n```\n:::\n\n\n\n\nThen run the diagnostics:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(plans)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSMC: 1,000 sampled plans of 3 districts on 1,977 units\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`adapt_k_thresh`=0.99 • `seq_alpha`=0.5\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`pop_temper`=0\n```\n\n\n:::\n\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPlan diversity 80% range: 0.19 to 0.69\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✖ WARNING: Low plan diversity\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nR-hat values for summary statistics:\n frac_kept dvs_gov_18 county_spl \n     1.007      1.000      1.003 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSampling diagnostics for SMC run 1 of 2 (500 samples)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k \nSplit 1       483 (96.6%)     12.1%        0.40   316 (100%)      8 \nSplit 2       475 (94.9%)      7.4%        0.46   292 ( 92%)      5 \nResample      404 (80.9%)       NA%        0.46   412 (130%)     NA \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSampling diagnostics for SMC run 2 of 2 (500 samples)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Eff. samples (%) Acc. rate Log wgt. sd  Max. unique Est. k \nSplit 1       482 (96.5%)      8.1%        0.41   308 ( 97%)     12 \nSplit 2       473 (94.7%)      5.6%        0.48   302 ( 96%)      7 \nResample      407 (81.5%)       NA%        0.48   415 (131%)     NA \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Watch out for low effective samples, very low acceptance rates (less than\n1%), large std. devs. of the log weights (more than 3 or so), and low numbers\nof unique plans. R-hat values for summary statistics should be between 1 and\n1.05.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Low diversity: Check for potential bottlenecks. Increase the number of\nsamples. Examine the diversity plot with `hist(plans_diversity(plans),\nbreaks=24)`. Consider weakening or removing constraints, or increasing the\npopulation tolerance. If the acceptance rate drops quickly in the final splits,\ntry increasing `pop_temper` by 0.01.\n```\n\n\n:::\n:::\n\n\n\n\nAnd everything looks good. Despite adding a constraint, the sample still looks fine under these summary statistics.\n\nFor more information on diagnostics, take a look at [McCartan and Imai (2022)](https://arxiv.org/abs/2008.06131).\n",
    "supporting": [
      "redist-40_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}