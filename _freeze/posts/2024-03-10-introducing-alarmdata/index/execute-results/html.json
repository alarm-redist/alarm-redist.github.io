{
  "hash": "4a23b70f3c5121801e66a44e247eccab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducing `alarmdata`\"\ndescription: |\n  The first stable version of our package `alarmdata` is now on CRAN, introducing\n  a data-focused package for using the outputs of ALARM Project research.\nauthor:\n    - name: Cory McCartan\n      affiliation: Center for Data Science, New York University\n      location: Cambridge, MA\n      email: corymccartan@nyu.edu\n      url: https://www.corymccartan.com\n    - name: Christopher T. Kenny\n      affiliation: Department of Government, Harvard University\n      location: Cambridge, MA\n      email: christopherkenny@fas.harvard.edu\n      url: https://www.christophertkenny.com/\n    - name: Tyler Simko\n      affiliation: Department of Government, Harvard University\n      location: Cambridge, MA\n      email: tsimko@g.harvard.edu\n      url: https://tylersimko.com/\n    - name: Michael Zhao\n      affiliation: Harvard College\n      location: Cambridge, MA\n      email: michaelzhao@college.harvard.edu\n    - name: Kosuke Imai\n      affiliation: Departments of Government and Statistics, Harvard University\n      location: Cambridge, MA\n      email: imai@harvard.edu\n      url: https://imai.fas.harvard.edu/\ndate: 2024-03-10\n---\n\n\n\n\n\n\n`alarmdata` is the newest component of the [`redistverse`](https://alarm-redist.org/redistverse), a family of packages which provide tools for redistricting analyses in R. \nAs of the past weekend, it is now on CRAN.\nYou can install the following with:\n\n```r\ninstall.packages('alarmdata')\n```\n\n\n# Downloading data\n\n`alarmdata` provides several functions for loading in data from ALARM Project projects. \nMost useful are `alarm_50state_map()` and `alarm_50state_plans()` which respectively load in the maps and plans from our [50-states project](https://alarm-redist.org/fifty-states/).\nThe map object contains Census and election for each state precinct.\nThe plans object contains alternative simulated plans.\n\nTo download and use these data, you can use the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(alarmdata)\nlibrary(redist)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: redistmetrics\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'redist'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_wa <- alarm_50state_map('WA')\nplans_wa <- alarm_50state_plans('WA')\n```\n:::\n\n\n\n\n\n# Using `redist_map` objects\n\n`redist` provides an extension to `tibble`s, called a `redist_map`. \nThis builds on the `sf` tibble class and adds an adjacency column to the data.\nThe adjacency column is modeled on each state's particular definition of contiguity.\nFor example, in Washington, contiguity across water is not considered unless there is a ferry route there.\nThis makes it easy to plug into `redist`'s sampling functions, like [`redist_smc`](https://alarm-redist.org/redist/reference/redist_smc.html) or [`redist_mergesplit`](https://alarm-redist.org/redist/reference/redist_mergesplit.html).\n\nEven for those not running simulation analyses, the `redist_map` can still be useful, as it is just an extension of the `sf` class.\nEach object contains the enacted 2010 and 2020 congressional plans.\nThey also contain census variables such as total population (`pop`), voting age population `vap`, and the major racial categories (e.g. `pop_white` or `vap_black`).\n\n`redist_map`s also include election data, which are retabulations of [VEST's election data](https://dataverse.harvard.edu/dataverse/electionscience) to census shapes.\nElection data follows a pattern of `office_year_party_candidate`, like `pre_16_dem_cli` for Clinton's 2016 presidential votes.\nYear averages take the form `adv_year` for Democratic votes and `arv_year` for Republican votes (e.g. arv_20 or adv_20).\nFinally, the `redist_map` also includes a `ndv` and `nrv` column, which are the average of Democratic and Republican votes in each shape, respectively. \n\n\nGiven all this, it interfaces nicely with `ggplot2` for making maps.\nHere, we can also load the `ggredist` package for some nice election mapping functions and colors.\nTo make a precinct map, we could run the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggredist)\nmap_wa |> \n    ggplot() +\n    geom_sf(aes(fill = ndv / (nrv + ndv))) +\n    scale_fill_party_c() +\n    theme_map()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nTo make a 2020 district map, we can swap out the `geom` call:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_wa |> \n    ggplot() +\n    geom_district(aes(group = cd_2020, fill = ndv, denom = nrv + ndv)) +\n    scale_fill_party_c() +\n    theme_map()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n# Using `redist_plans` with your own data\n\nOnce you've downloaded some plans, we've made it easy for you to add your own data to the `redist` framework.\nTo demo this, we can look at the NY plans passed last week (February 2024).\n\nFirst, we can load in the map and plans for New York:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_ny <- alarm_50state_map('NY')\nplans_ny <- alarm_50state_plans('NY')\n```\n:::\n\n\n\n\nNext, we can read in the block assignment data for the commission plan and the legislature plan.\nFor convenience of the example, we can grab this data from a [GitHub repo](https://github.com/christopherkenny/ny-baf). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# commission link\ncomm_link <- 'https://raw.githubusercontent.com/christopherkenny/ny-baf/main/data/A09310.csv'\n\n# download the legislature xlsx file\nleg_link <- 'https://github.com/christopherkenny/ny-baf/raw/main/data-raw/congressional_plan_equivalency.xlsx'\ntemp_leg <- tempfile(fileext = '.xlsx')\ncurl::curl_download(leg_link, temp_leg)\n\n# read in the data\nbaf_commission <- readr::read_csv(comm_link, col_types = 'ci') |> \n  dplyr::rename(A09310 = district)\nbaf_legislature <- readxl::read_excel(temp_leg, col_types = c('text', 'text')) |> \n  dplyr::rename(\n    GEOID = Block,\n    commission2024 = `DistrictID:1`\n  ) |> \n  dplyr::mutate(commission2024 = as.integer(commission2024))\n```\n:::\n\n\n\n\nFinally, `alarmdata` provides a function `alarmdata::alarm_add_plan()` to add the new reference plans to the underlying `redist_plans` object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplans_ny <- plans_ny |>\n  alarm_add_plan(ref_plan = baf_commission, map = map_ny, name = 'A09310') |>\n  alarm_add_plan(ref_plan = baf_legislature, map = map_ny, name = 'commission2024')\n```\n:::\n\n\n\n\nThis gives a full `redist_plans` object with the new plans added in.\nWe can do anything we want with this.\nFor example, stealing a bit of code from [our 50-states website](https://github.com/alarm-redist/alarm-redist.github.io/blob/main/_fifty-states/fifty-states.R), we can look at the Democratic vote shares across districts:\n\nFirst, we can define some helper functions for the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlbl_party <- function(x) {\n  dplyr::if_else(x == 0.5, \"Even\",\n    paste0(dplyr::if_else(x < 0.5, \"R+\", \"D+\"), scales::number(200 * abs(x - 0.5), 1))\n  )\n}\n\nr_geom <- function(...) {\n  ggplot2::geom_point(\n    ggplot2::aes(x = as.integer(.data$.distr_no),\n                 y = e_dvs,\n                 color = .data$draw, \n                 shape = .data$draw),\n    ...\n  )\n}\n```\n:::\n\n\n\n\nThen, we can make a simple plot of Democratic vote share by district:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggredist)\nredist.plot.distr_qtys(plans_ny, e_dvs,\n                       color_thresh = 0.5,\n                       size = 0.04 - sqrt(8) / 250, alpha = 0.4,\n                       ref_geom = r_geom\n) +\n    geom_hline(yintercept = 0.5, color = '#00000055', size = 0.5) +\n    scale_y_continuous('Two-party vote margin', labels = lbl_party) +\n    labs(x = 'Simulated districts, ordered by Democratic vote margin') +\n    annotate('text',\n             x = 3.5, y = sort(plans_ny$e_dvs[1:26])[3],\n             label = 'Commission 2024', hjust = -0.05, size = 3.5,\n             color = '#52796F'\n    ) +\n    annotate('text',\n             x = 1.5, y = min(plans_ny$e_dvs[27:52]),\n             label = 'A09310', hjust = 0.05, size = 3.5,\n             color = '#A09310'\n    ) +\n    annotate('text',\n             x = 3.5, y = sort(plans_ny$e_dvs[53:78])[3],\n             label = 'Cervas', hjust = -0.05, size = 3.5,\n             color = 'black'\n    ) + \n\n    scale_color_manual(values = c('#52796F', '#A09310', 'black', ggredist$partisan[2], ggredist$partisan[14]),\n                       labels = c('pt', 'Rep.', 'Dem.'), guide = 'none') +\n    scale_shape_manual(values = c(16, 17, 18), guide = 'none') +\n    theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n# Cache data across projects\n\nBy default, all downloads are directed to a temporary directory.\nEach time you reload R, you need to re-download the data.\nTo avoid this, you can set the `alarm.use_cache` option to a directory where you want to store the data.\n\n```r\noptions(alarm.use_cache = TRUE)\n```\n\nThis can be set on a by-session basis, but we recommend setting it in your `.Rprofile` so that it is set every time you start R. To open this file, use the following command:\n\n```r\nusethis::edit_r_profile()\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}